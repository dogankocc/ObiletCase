@using ObiletService.Core.Application.Features.Queries.BusLocation.List

@{
    Layout = "~/Views/Shared/_layouth.cshtml";
    ViewData["Title"] = "Index";
}
@model GetBusLocationQueryResponse

 <style>
    .dropdown li:first-child {
        position: sticky;
        top: 0;
        background-color: #f1f1f1;
        z-index: 1; 
        padding: 12px;
    }
  </style>
<link rel="stylesheet" href="~/css/flatpickr.min.css">

<div class="d-flex align-items-center justify-content-center vh-100">

    <div class="container-lg">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg navbar-dark bg-primary navbar-custom mb-5"></nav>

            <div class="list-group rounded-0 position-relative">
                <div class="dropdown">
                    <div class="list-group-item list-group-item-action" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="w-100">
                            <h5 class="mb-1">Nereden</h5>
                            <p id="selected_from_location" class="mb-1" data-selected-from-location-id="@Model.Data[0].Id">@Model.Data[0].Name</p>
                        </div>
                    </div>

                    <ul id="departure-bus-location-list" class="dropdown-menu w-100 p-0" style="max-height:300px; overflow:auto;">
                        <li class="dropdown-item">
                            <div class="input-group">
                                <button class="btn btn-outline-primary" type="button" onclick="searchDepartureBusLocation(event)">
                                    <span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                        </svg>
                                    </span>
                                </button>
                                <input id="departure-bus-location" type="text" class="form-control" placeholder="Kalkış noktası arama" aria-label="Kalkış noktası arama">
                            </div>
                        </li>
                        @foreach (var location in Model.Data)
                        {
                            <li id="from_location_@location.Id" onclick="handleSelectFromLocation(event, @location.Id)"><a class="dropdown-item" href="#">@location.Name</a></li>
                        }
                    </ul>
                </div>
                <div class="mt-2"></div>
                <button class="position-absolute" style="right: 0;z-index: 999;top: 62px;" onclick="handleShiftLocations(event)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5" />
                    </svg>
                </button>
         
                <div class="dropdown">
                    <div class="list-group-item list-group-item-action" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="w-100">
                            <h5 class="mb-1">Nereye</h5>
                            <p id="selected_to_location" class="mb-1" data-selected-to-location-id="@Model.Data[1].Id">@Model.Data[1].Name</p>
                        </div>
                    </div>

                    <ul id="destination-bus-location-list" class="dropdown-menu w-100 p-0" style="max-height:300px; overflow:auto;">
                        <li class="dropdown-item">
                            <div class="input-group">
                                <button class="btn btn-outline-primary" type="button" onclick="searchDestinationBusLocation(event)">
                                    <span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                        </svg>
                                    </span>
                                </button>
                                <input id="destination-bus-location" name="data" type="text" class="form-control" placeholder="Varış noktası arama" aria-label="Varış noktası arama" aria-describedby="basic-addon1">
                            </div>

                        </li>
                        @foreach (var location in Model.Data)
                        {
                            <li id="to_location_@location.Id" onclick="handleSelectToLocation(event, @location.Id)"><a class="dropdown-item" href="#">@location.Name</a></li>
                        }
                    </ul>
                </div>
                <div class="mt-2"></div>
                <div class="d-flex list-group-item list-group-item-action" aria-expanded="false" onclick="handleClickDate(event)">
                    <div type="button" class="w-100 h-100">
                        <h5 class="mb-1">Tarih</h5>
                        <p id="selected_date" class="mb-1"></p>
                    </div>
                    <input type="text" id="date-input" name="tarih" style="opacity: 0; position: absolute;">
                    <div class="float-end" onclick="event.stopPropagation()">
                        <div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
                            <input type="radio" class="btn-check" name="vbtn-radio" id="today-button" autocomplete="off">
                            <label class="btn btn-outline-primary" for="today-button">Bugün</label>
                            <input type="radio" class="btn-check" name="vbtn-radio" id="tomorrow-button" autocomplete="off" checked="">
                            <label class="btn btn-outline-primary" for="tomorrow-button">Yarın</label>
                        </div>
                 
                    </div>
                </div>

            </div>
            <div class="d-grid gap-2 col-6 mx-auto mt-5">
                <button type="button" class="btn btn-primary" onclick="getjourney(event)">Bileti Bul</button>

            </div>
        </div>
  
    </div>
  </div>

<script src="~/js/flatpickr.min.js"></script>
<script src="~/js/flatpickr_tr.js"></script>
  <script>
      var datepicker;
    let selectedDate = "";

    document.addEventListener("DOMContentLoaded", function () {
        let tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        let day = String(tomorrow.getDate()).padStart(2, "0");
        let month = String(tomorrow.getMonth() + 1).padStart(2, "0");
        let year = tomorrow.getFullYear();

        selectedDate = `${year}-${month}-${day}`;

        let formattedDate = `${day}-${month}-${year}`;

        document.getElementById("selected_date").innerText = formattedDate;

        datepicker = flatpickr("#date-input", {
            defaultDate: tomorrow,
            dateFormat: "d-m-Y",
            locale: "tr",
            onChange: function (selectedDates, dateStr, instance) {
                console.log(dateStr)
                document.getElementById("selected_date").innerText = dateStr;
                selectedDate = instance.formatDate(selectedDates[0], "Y-m-d");
            }
        });
        document.getElementById("today-button").addEventListener("click", handleClickNowDate);

        document.getElementById("tomorrow-button").addEventListener("click", handleClickTomorrowDate);

    });

    function handleSelectFromLocation(event, locationId){

        var selectedToLocationId = document.getElementById("selected_to_location").getAttribute("data-selected-to-location-id");

        if (selectedToLocationId == locationId)
            return;

        var selectedFromLocationElement = document.getElementById("selected_from_location");

        selectedFromLocationElement.innerText = event.target.innerText;
        selectedFromLocationElement.setAttribute("data-selected-from-location-id", locationId);
    }

    function handleSelectToLocation(event, locationId) {

        var selectedFromLocationId = document.getElementById("selected_from_location").getAttribute("data-selected-from-location-id");

        if (selectedFromLocationId == locationId)
            return;

        var selectedToLocationElement = document.getElementById("selected_to_location");

        selectedToLocationElement.innerText = event.target.innerText;
        selectedToLocationElement.setAttribute("data-selected-to-location-id", locationId);
    }

      function handleShiftLocations(event) {
        var selectedFromLocationElement = document.getElementById("selected_from_location");
        var selectedFromLocationId = selectedFromLocationElement.getAttribute("data-selected-from-location-id");
        var fromLocationName = selectedFromLocationElement.innerText;

        var selectedToLocationElement = document.getElementById("selected_to_location");
        var selectedToLocationId = selectedToLocationElement.getAttribute("data-selected-to-location-id");
        var toLocationName = selectedToLocationElement.innerText;

        selectedToLocationElement.innerText = fromLocationName;
        selectedToLocationElement.setAttribute("data-selected-to-location-id", selectedFromLocationId);

        selectedFromLocationElement.innerText = toLocationName;
        selectedFromLocationElement.setAttribute("data-selected-from-location-id", selectedToLocationId);

      }

      function handleClickDate(event) {
        var dateInput = document.getElementById("date-input");
        dateInput.click()
      }


    function handleClickNowDate(event) {
        const today = new Date();
        datepicker.setDate(today);
        let day = String(today.getDate()).padStart(2, "0");
        let month = String(today.getMonth() + 1).padStart(2, "0");
        let year = today.getFullYear();

        let formattedDate = `${day}-${month}-${year}`;

        document.getElementById("selected_date").innerText = formattedDate;
    }

    function handleClickTomorrowDate(event) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        datepicker.setDate(tomorrow);

        let day = String(tomorrow.getDate()).padStart(2, "0");
        let month = String(tomorrow.getMonth() + 1).padStart(2, "0");
        let year = tomorrow.getFullYear();

        let formattedDate = `${day}-${month}-${year}`;

        document.getElementById("selected_date").innerText = formattedDate;
    }

    function searchDepartureBusLocation(event){
        event.stopPropagation()
        var text = document.getElementById("departure-bus-location").value;

        fetch('https://localhost:5000/home/SearchBusLocations', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                data: text
            })
        })
            .then(response => response.json())
            .then(response => {
                let dropdownMenu = document.getElementById("departure-bus-location-list")
                let firstItem = dropdownMenu.querySelector("li:first-child"); // İlk li'yi al

                // Tüm mevcut öğeleri sil, ancak ilk öğeyi koru
                while (dropdownMenu.children.length > 1) {
                    dropdownMenu.removeChild(dropdownMenu.lastChild);
                }

                // Yeni öğeleri ekle
                response.result.data.forEach(location => {
                    let li = document.createElement("li");
                    li.id = `from_location_${location.id}`;
                    li.onclick = function (event) { handleSelectFromLocation(event, location.id); };

                    let a = document.createElement("a");
                    a.className = "dropdown-item";
                    a.href = "#";
                    a.textContent = location.name;

                    li.appendChild(a);
                    dropdownMenu.appendChild(li);
                });
            }).catch(error => console.error("Error:", error));
    }

    function searchDestinationBusLocation(event){
        event.stopPropagation()
        var text = document.getElementById("destination-bus-location").value;

        fetch('https://localhost:5000/home/SearchBusLocations', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                data: text
            })
        })
       .then(response => response.json())
       .then(response => {
           let dropdownMenu = document.getElementById("destination-bus-location-list")
           let firstItem = dropdownMenu.querySelector("li:first-child"); // İlk li'yi al

           // Tüm mevcut öğeleri sil, ancak ilk öğeyi koru
           while (dropdownMenu.children.length > 1) {
               dropdownMenu.removeChild(dropdownMenu.lastChild);
           }

           // Yeni öğeleri ekle
           response.result.data.forEach(location => {
               let li = document.createElement("li");
               li.id = `to_location_${location.id}`;
               li.onclick = function (event) { handleSelectToLocation(event, location.id); };

               let a = document.createElement("a");
               a.className = "dropdown-item";
               a.href = "#";
               a.textContent = location.name;

               li.appendChild(a);
               dropdownMenu.appendChild(li);
           });
       }).catch(error => console.error("Error:", error));
    }

      function getjourney(event) {
        let originId = document.getElementById("selected_from_location").getAttribute("data-selected-from-location-id");
        let destinationId = document.getElementById("selected_to_location").getAttribute("data-selected-to-location-id");

        const params = new URLSearchParams({
            originId,
            destinationId,
            selectedDate
        });
          window.location.href = `/home/journey?${params.toString()}`;
 
      }
  </script>
